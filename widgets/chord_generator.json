{
  "id": "chord_generator",
  "name": "Chord Generator",
  "version": "1.0",
  "category": "Generator",
  "description": "Generates chords from single note input",
  "entryElements": [
    {
      "id": "type",
      "label": "TYPE",
      "controlType": "dropdown",
      "direction": "config",
      "dataType": "string",
      "description": "Chord type/quality",
      "valueConstraints": {
        "type": "options",
        "options": [
          {"value": "major", "label": "Major"},
          {"value": "minor", "label": "Minor"},
          {"value": "diminished", "label": "Dim"},
          {"value": "augmented", "label": "Aug"},
          {"value": "sus4", "label": "Sus4"},
          {"value": "dom7", "label": "Dom7"}
        ],
        "default": "major"
      }
    },
    {
      "id": "vel",
      "label": "VEL%",
      "controlType": "knob",
      "direction": "config",
      "dataType": "int",
      "description": "Chord note velocity percentage",
      "valueConstraints": {
        "type": "range",
        "min": 10,
        "max": 100,
        "default": 80
      }
    },
    {
      "id": "output",
      "label": "output",
      "controlType": "jack",
      "direction": "output",
      "dataType": "int",
      "description": "Chord output signal",
      "valueConstraints": {
        "type": "range"
      }
    }
  ],
  "template": [
    "global ${output} = 0;",
    "@{if type == 'major':",
    "  noteOn(ch, note, vel) -> ",
    "    chord_vel = (vel * @{vel}) / 100,",
    "    noteOn(ch, note, chord_vel),",
    "    noteOn(ch, note + 4, chord_vel),",
    "    noteOn(ch, note + 7, chord_vel),",
    "    ${output} = note;",
    "  noteOff(ch, note, vel) ->",
    "    noteOff(ch, note, vel),",
    "    noteOff(ch, note + 4, vel),",
    "    noteOff(ch, note + 7, vel);",
    "elif type == 'minor':",
    "  noteOn(ch, note, vel) -> ",
    "    chord_vel = (vel * @{vel}) / 100,",
    "    noteOn(ch, note, chord_vel),",
    "    noteOn(ch, note + 3, chord_vel),",
    "    noteOn(ch, note + 7, chord_vel),",
    "    ${output} = note;",
    "  noteOff(ch, note, vel) ->",
    "    noteOff(ch, note, vel),",
    "    noteOff(ch, note + 3, vel),",
    "    noteOff(ch, note + 7, vel);",
    "elif type == 'diminished':",
    "  noteOn(ch, note, vel) -> ",
    "    chord_vel = (vel * @{vel}) / 100,",
    "    noteOn(ch, note, chord_vel),",
    "    noteOn(ch, note + 3, chord_vel),",
    "    noteOn(ch, note + 6, chord_vel),",
    "    ${output} = note;",
    "  noteOff(ch, note, vel) ->",
    "    noteOff(ch, note, vel),",
    "    noteOff(ch, note + 3, vel),",
    "    noteOff(ch, note + 6, vel);",
    "elif type == 'augmented':",
    "  noteOn(ch, note, vel) -> ",
    "    chord_vel = (vel * @{vel}) / 100,",
    "    noteOn(ch, note, chord_vel),",
    "    noteOn(ch, note + 4, chord_vel),",
    "    noteOn(ch, note + 8, chord_vel),",
    "    ${output} = note;",
    "  noteOff(ch, note, vel) ->",
    "    noteOff(ch, note, vel),",
    "    noteOff(ch, note + 4, vel),",
    "    noteOff(ch, note + 8, vel);",
    "elif type == 'sus4':",
    "  noteOn(ch, note, vel) -> ",
    "    chord_vel = (vel * @{vel}) / 100,",
    "    noteOn(ch, note, chord_vel),",
    "    noteOn(ch, note + 5, chord_vel),",
    "    noteOn(ch, note + 7, chord_vel),",
    "    ${output} = note;",
    "  noteOff(ch, note, vel) ->",
    "    noteOff(ch, note, vel),",
    "    noteOff(ch, note + 5, vel),",
    "    noteOff(ch, note + 7, vel);",
    "else:",
    "  noteOn(ch, note, vel) -> ",
    "    chord_vel = (vel * @{vel}) / 100,",
    "    noteOn(ch, note, chord_vel),",
    "    noteOn(ch, note + 4, chord_vel),",
    "    noteOn(ch, note + 7, chord_vel),",
    "    noteOn(ch, note + 10, chord_vel),",
    "    ${output} = note;",
    "  noteOff(ch, note, vel) ->",
    "    noteOff(ch, note, vel),",
    "    noteOff(ch, note + 4, vel),",
    "    noteOff(ch, note + 7, vel),",
    "    noteOff(ch, note + 10, vel);",
    "}"
  ],
  "generates": {
    "variables": ["${output}"],
    "rules": ["${instanceId}_chord_processor"]
  }
}